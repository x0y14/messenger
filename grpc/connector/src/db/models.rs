// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use diesel::sql_types::{Timestamptz};
use serde::{Deserialize, Serialize};
use serde_json;
use crate::db::schema::*;


use chrono::DateTime;
use chrono::offset::Utc;

// 取得用
#[derive(Queryable, Debug, Identifiable)]
pub struct Account {
    pub id: String,
    pub email: String,
    pub username: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

// 挿入用
#[derive(Insertable, Debug)]
#[table_name = "accounts"]
pub struct NewAccount<'a> {
    pub id: &'a String,
    pub email: &'a String,
    pub username: Option<&'a String>,
    pub created_at: &'a DateTime<Utc>,
    pub updated_at: &'a DateTime<Utc>,
}

// 入力用
pub struct InputInsertAccount<'a> {
    pub id: &'a String,
    pub email: &'a String,
    pub username: Option<&'a String>,
}

// 入力用
pub struct InputUpdateAccount<'a> {
    pub email: Option<&'a String>,
    pub username: Option<&'a String>,
}

// 更新用
#[derive(AsChangeset)]
#[table_name="accounts"]
pub struct UpdateAccount<'a> {
    pub email: Option<&'a String>,
    pub username: Option<&'a String>,
    pub updated_at: &'a DateTime<Utc>,
}


// 取得用
#[derive(Queryable, Debug, Identifiable)]
pub struct Message {
    pub id: String,
    pub from: String,
    pub to: String,
    pub content_type: i32,
    pub metadata: serde_json::Value,
    pub text: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

// 入力用
pub struct InputInsertMessage<'a> {
    pub id: &'a String,
    pub from: &'a String,
    pub to: &'a String,
    pub content_type: &'a i32,
    pub metadata: &'a serde_json::Value,
    pub text: &'a String
}

// 挿入用
#[derive(Insertable, Debug)]
#[table_name = "messages"]
pub struct NewMessage<'a> {
    pub id: &'a String,
    pub from: &'a String,
    pub to: &'a String,
    pub content_type: &'a i32,
    pub metadata: &'a serde_json::Value,
    pub text: &'a String,
    pub created_at: &'a DateTime<Utc>,
    pub updated_at: &'a DateTime<Utc>,
}


#[derive(Queryable, Debug, Identifiable)]
#[primary_key(revision)]
pub struct Operation {
    pub revision: i64,
    pub op_type: i32,
    pub source: String,
    pub destination: Vec<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

// 取得用
#[derive(Queryable, Debug)]
pub struct Profile {
    pub id: String,
    pub display_name: String,
    pub status_message: Option<String>,
    pub icon_path: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

// 挿入用
#[derive(Insertable, Debug)]
#[table_name = "profiles"]
pub struct NewProfile<'a> {
    pub id: &'a String,
    pub display_name: &'a String,
    pub status_message: Option<&'a String>,
    pub icon_path: Option<&'a String>,
    pub created_at: &'a DateTime<Utc>,
    pub updated_at: &'a DateTime<Utc>,
}

// 入力用
pub struct InputInsertProfile<'a> {
    pub id: &'a String,
    pub display_name: &'a String,
    pub status_message: Option<&'a String>,
    pub icon_path: Option<&'a String>
}

// 入力用
pub struct InputUpdateProfile<'a> {
    pub display_name: Option<&'a String>,
    pub status_message: Option<&'a String>,
    pub icon_path: Option<&'a String>
}

// 更新用
#[derive(AsChangeset)]
#[table_name="profiles"]
pub struct UpdateProfile<'a> {
    pub display_name: Option<&'a String>,
    pub status_message: Option<&'a String>,
    pub icon_path: Option<&'a String>,
    pub updated_at: &'a DateTime<Utc>
}